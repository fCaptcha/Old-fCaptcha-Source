import httpx, json

def decrypt(data: str) -> str:
    url = "http://solver.dexv.lol:1500/decrypt"
    json = {"data": data, "key": "6643617074636861206f6e20746f7021"}
    return httpx.post(url, json=json).text

decrypted = decrypt("")

try:
    decrypted_json = json.loads(decrypted)
    print(json.dumps(decrypted_json, indent=4))
except json.JSONDecodeError:
    print("yeah")