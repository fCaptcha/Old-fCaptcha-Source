import httpx, json

def decrypt(data: str) -> str:
    url = "http://solver.dexv.lol:1500/decrypt"
    json = {"data": data, "key": "88de30e1c0d0e89d"}
    return httpx.post(url, json=json).text

decrypted = decrypt("")

try:
    decrypted_json = json.loads(decrypted)
    print(json.dumps(decrypted_json, indent=4))
except json.JSONDecodeError:
    print("yeah")